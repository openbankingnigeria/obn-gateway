volumes:
  mysql_data: {}
  redis_data: {}
  kong_dev_data: {}
  kong_dev_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_dev_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_prod_data: {}
  kong_prod_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_prod_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  certs: {}
  esdata: {}
  logstashdata: {}

networks:
  kong-net:
    name: kong-net
    external: false
  obn-net:
    name: obn-net
    external: false
  elastic-net:
    name: elastic-net
    external: false

x-kong-dev-config: &kong_dev_config
  environment:
    KONG_PG_HOST: kong-dev-db
  volumes:
    - kong_dev_prefix_vol:/var/run/kong
    - kong_dev_tmp_vol:/tmp

x-kong-prod-config: &kong_prod_config
  environment:
    KONG_PG_HOST: kong-prod-db
  volumes:
    - kong_prod_prefix_vol:/var/run/kong
    - kong_prod_tmp_vol:/tmp

x-obn-server-config: &obn_server_config
  environment:
    DATABASE_HOST: ${DATABASE_HOST:-mysql}
    DATABASE_USERNAME: ${DATABASE_USERNAME:-obn}
    DATABASE_PASSWORD_FILE: /run/secrets/mysql_password
    DATABASE_NAME: ${DATABASE_NAME:-obn}
    DATABASE_PORT: ${DATABASE_PORT:-3306}
    DATABASE_TYPE: mysql
    JWT_SECRET_FILE: /run/secrets/jwt_secret
    SERVER_PORT: ${SERVER_PORT:-4000}
    EMAIL_HOST: ${EMAIL_HOST}
    EMAIL_PORT: ${EMAIL_PORT}
    EMAIL_USER: ${EMAIL_USER}
    EMAIL_PASSWORD_FILE: /run/secrets/email_password
    EMAIL_SECURE: ${EMAIL_SECURE}
    EMAIL_FROM: ${EMAIL_FROM}
    DEFAULT_EMAIL: ${DEFAULT_EMAIL:?DEFAULT_EMAIL is required}
    COMPANY_NAME: ${COMPANY_NAME:?COMPANY_NAME is required}
    DEFAULT_PASSWORD_FILE: /run/secrets/default_password
    KONG_ADMIN_API_ENDPOINT: ${KONG_ADMIN_API_ENDPOINT:-http://kong-dev:8001}
    KONG_GATEWAY_API_ENDPOINT: ${KONG_GATEWAY_API_ENDPOINT:-http://localhost:8000}
    KONG_ADMIN_API_ENDPOINT_PRODUCTION: ${KONG_ADMIN_API_ENDPOINT_PRODUCTION:-http://kong-prod:8001}
    KONG_GATEWAY_API_ENDPOINT_PRODUCTION: ${KONG_GATEWAY_API_ENDPOINT_PRODUCTION:-http://localhost:8100}
    REGISTRY_INTROSPECTION_ENDPOINT: ${REGISTRY_INTROSPECTION_ENDPOINT}
    REGISTRY_INTROSPECTION_CLIENT_ID: ${REGISTRY_INTROSPECTION_CLIENT_ID}
    REGISTRY_INTROSPECTION_CLIENT_SECRET_FILE: /run/secrets/registry_introspection_client_secret
    REGISTRY_INTROSPECTION_ENDPOINT_PRODUCTION: ${REGISTRY_INTROSPECTION_ENDPOINT_PRODUCTION}
    REGISTRY_INTROSPECTION_CLIENT_ID_PRODUCTION: ${REGISTRY_INTROSPECTION_CLIENT_ID_PRODUCTION}
    REGISTRY_INTROSPECTION_CLIENT_SECRET_PRODUCTION_FILE: /run/secrets/registry_introspection_client_secret_production
    MANAGEMENT_URL: ${MANAGEMENT_URL:?MANAGEMENT_URL is required}
    LOGSTASH_ENDPOINT: ${LOGSTASH_ENDPOINT:-http://obn-logstash:8080}
    ELASTICSEARCH_ENDPOINT: ${ELASTICSEARCH_ENDPOINT:-https://es:9200}
    ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME:-elastic}
    ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD:?ELASTICSEARCH_PASSWORD is required}
    TRUSTED_ORIGINS: ${TRUSTED_ORIGINS}
    DEFAULT_DOWNSTREAM_URL: ${DEFAULT_DOWNSTREAM_URL}
  volumes:
    - certs:/usr/src/server/certs
  secrets:
    - mysql_password
    - jwt_secret
    - default_password
    - email_password
    - registry_introspection_client_secret
    - registry_introspection_client_secret_production
  networks:
    - kong-net
    - obn-net
    - elastic-net
  restart: on-failure:5

services:
  kong-dev-db:
    container_name: obn-kong-dev-db
    extends:
      file: docker-compose-kong.yml
      service: kong-db
    volumes:
      - kong_dev_data:/var/lib/postgresql/data
    profiles:
      - dev
      - kong
      - kong-dev-db
  kong-dev-migrations:
    container_name: obn-kong-dev-migrations
    extends:
      file: docker-compose-kong.yml
      service: kong-migrations
    profiles:
      - dev
      - kong
      - kong-dev
    <<: *kong_dev_config
  kong-dev-migrations-up:
    container_name: obn-kong-dev-migrations-up
    extends:
      file: docker-compose-kong.yml
      service: kong-migrations-up
    depends_on:
      kong-dev-db:
        condition: service_healthy
    profiles:
      - dev
      - kong
      - kong-dev
    <<: *kong_dev_config
  kong-dev:
    container_name: obn-kong-dev
    extends:
      file: docker-compose-kong.yml
      service: kong
    ports:
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8300:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8453:8443/tcp"
      - "${KONG_ADMIN_INBOUND_PROXY_LISTEN:-127.0.0.1}:8001:8001/tcp"
      - "${KONG_ADMIN_INBOUND_SSL_PROXY_LISTEN:-127.0.0.1}:8454:8444/tcp"
    depends_on:
      kong-dev-migrations-up:
        condition: service_completed_successfully
    profiles:
      - dev
      - kong
      - kong-dev
    <<: *kong_dev_config

  kong-prod-db:
    container_name: obn-kong-prod-db
    extends:
      file: docker-compose-kong.yml
      service: kong-db
    volumes:
      - kong_prod_data:/var/lib/postgresql/data
    profiles:
      - prod
      - kong
      - kong-prod-db
  kong-prod-migrations:
    container_name: obn-kong-prod-migrations
    extends:
      file: docker-compose-kong.yml
      service: kong-migrations
    profiles:
      - prod
      - kong
      - kong-prod
    <<: *kong_prod_config
  kong-prod-migrations-up:
    container_name: obn-kong-prod-migrations-up
    extends:
      file: docker-compose-kong.yml
      service: kong-migrations-up
    depends_on:
      kong-prod-db:
        condition: service_healthy
    profiles:
      - prod
      - kong
      - kong-prod
    <<: *kong_prod_config
  kong-prod:
    container_name: obn-kong-prod
    extends:
      file: docker-compose-kong.yml
      service: kong
    ports:
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8100:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8543:8443/tcp"
      - "${KONG_ADMIN_INBOUND_PROXY_LISTEN:-127.0.0.1}:8101:8001/tcp"
      - "${KONG_ADMIN_INBOUND_SSL_PROXY_LISTEN:-127.0.0.1}:8544:8444/tcp"
    depends_on:
      kong-prod-migrations-up:
        condition: service_completed_successfully
    profiles:
      - prod
      - kong
      - kong-prod
    <<: *kong_prod_config

  elk-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION:-8.11.1}
    container_name: obn-elk-setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: root
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es\n"\
          "    dns:\n"\
          "      - es\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es:9200 | grep -q "missing authentication credentials"; do sleep 1; done;
        echo "All done!";
        sleep 1s;
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es/es.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 30
    environment:
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD:?ELASTICSEARCH_PASSWORD is required}
    networks:
      - elastic-net
    profiles:
      - dev
      - prod
      - elk

  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION:-8.11.1}
    container_name: obn-es
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata:/usr/share/elasticsearch/data
    depends_on:
      elk-setup:
        condition: service_healthy
    environment:
      - node.name=es
      - cluster.name=${CLUSTER_NAME:-docker-cluster}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es/es.key
      - xpack.security.http.ssl.certificate=certs/es/es.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es/es.key
      - xpack.security.transport.ssl.certificate=certs/es/es.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${ES_LICENSE:-basic}
    mem_limit: ${ES_MEM_LIMIT:-1073741824}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
        ]
      interval: 1s
      timeout: 5s
      retries: 60
    networks:
      - elastic-net
    profiles:
      - dev
      - prod
      - elk
      - es

  logstash:
    image: docker.elastic.co/logstash/logstash:${ELASTIC_STACK_VERSION:-8.11.1}
    container_name: obn-logstash
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata:/usr/share/logstash/data
      - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    depends_on:
      es:
        condition: service_healthy
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - ELASTIC_HOSTS=https://es:9200
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:9600/_node/stats || exit 1"
        ]
      interval: 1s
      timeout: 5s
      retries: 30
    networks:
      - elastic-net
    profiles:
      - dev
      - prod
      - elk
      - logstash

  mysql:
    image: "${MYSQL_DOCKER_TAG:-mysql:8.3.0}"
    container_name: obn-mysql
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: ${DATABASE_NAME:-obn}
      MYSQL_USER: ${DATABASE_USERNAME:-obn}
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
    secrets:
      - mysql_password
      - mysql_root_password
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - obn-net
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "mysql --user=root --password=$$(cat $$MYSQL_ROOT_PASSWORD_FILE) -e 'SELECT 1;'"
        ]
      interval: 1s
      timeout: 5s
      retries: 30
    profiles:
      - dev
      - prod
      - mysql

  web:
    image: obn-web
    build:
      context: ./apps/web
      args:
        - NEXT_PUBLIC_BASE_API_ENDPOINT=${SERVER_API_ENDPOINT:-http://localhost:${SERVER_PORT:-4000}}
    container_name: obn-web
    environment:
      - NEXT_PUBLIC_BASE_API_ENDPOINT=${SERVER_API_ENDPOINT:-http://localhost:${SERVER_PORT:-4000}}
      - BASE_API_ENDPOINT=${BASE_API_SERVER_API_ENDPOINT:-http://obn-server:${SERVER_PORT:-4000}}
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          '(echo -e "GET / HTTP/1.1\r\nhost: 127.0.0.1\r\n\r\n"; sleep 0.5) | nc 127.0.0.1 3000 | head -n 1 | grep -q "200" -s -m 1'
        ]
      interval: 1s
      timeout: 5s
      retries: 30
    networks:
      - obn-net
    ports:
      - "${WEB_PORT:-3000}:3000"
    profiles:
      - dev
      - prod
      - web

  server:
    image: obn-server
    build: ./apps/server
    container_name: obn-server
    ports:
      - ${SERVER_PORT:-4000}:4000
    depends_on:
      mysql:
        condition: service_healthy
      kong-dev:
        condition: service_healthy
      kong-prod:
        condition: service_healthy
      es:
        condition: service_started
      server-setup:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          '(echo -e "GET /app/health HTTP/1.1\r\nhost: 127.0.0.1\r\n\r\n"; sleep 0.5) | nc 127.0.0.1 4000 | head -n 1 | grep -q "200" -s -m 1'
        ]
      interval: 1s
      timeout: 5s
      retries: 30
    profiles:
      - dev
      - prod
      - server
    <<: *obn_server_config

  server-setup:
    image: obn-server
    build: ./apps/server
    container_name: obn-server-setup
    command: [ "sh", "-c", "pnpm migration:run:prod;pnpm start:setup" ]
    depends_on:
      mysql:
        condition: service_healthy
      kong-dev:
        condition: service_healthy
      kong-prod:
        condition: service_healthy
    profiles:
      - dev
      - prod
      - server
    <<: *obn_server_config

secrets:
  kong_postgres_password:
    environment: KONG_PG_PASSWORD
  mysql_root_password:
    environment: MYSQL_ROOT_PASSWORD
  mysql_password:
    environment: DATABASE_PASSWORD
  jwt_secret:
    environment: JWT_SECRET
  default_password:
    environment: DEFAULT_PASSWORD
  email_password:
    environment: EMAIL_PASSWORD
  registry_introspection_client_secret:
    environment: REGISTRY_INTROSPECTION_CLIENT_SECRET
  registry_introspection_client_secret_production:
    environment: REGISTRY_INTROSPECTION_CLIENT_SECRET_PRODUCTION
